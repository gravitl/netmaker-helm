apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "netmaker.fullname" . }}-mqtt
  labels:
    app: {{ include "netmaker.fullname" . }}-mqtt
spec:
  selector:
    matchLabels:
      app: {{ include "netmaker.fullname" . }}-mqtt
  replicas:  {{ .Values.mq.replicas }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ include "netmaker.fullname" . }}-mqtt
    spec:
      {{- if .Values.mq.singlenode }}    
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: mqhost
                operator: In
                values:
                - "true"
      {{- end }}
      containers:
      - env:
        - name: NETMAKER_SERVER_HOST
          value: https://api.{{ required "A valid .Values.baseDomain entry required!" .Values.baseDomain}}
        image: eclipse-mosquitto:2.0.11-openssl
        command: ["/mosquitto/config/wait.sh"]
        imagePullPolicy: Always
        name: mosquitto
        livenessProbe:
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 8883
          timeoutSeconds: 1
        ports:
        - containerPort: 1883        
          name: mqtt
          protocol: TCP
        - containerPort: 8883        
          name: mqtt2
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 8883
          timeoutSeconds: 1
        resources: {}
        startupProbe:
          failureThreshold: 30
          periodSeconds: 5
          successThreshold: 1
          tcpSocket:
            port: 8883
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /mosquitto/config/mosquitto.conf
          name: mosquitto-config
          subPath: mosquitto.conf
        - mountPath: /mosquitto/config/wait.sh
          name: wait-script
          subPath: wait.sh
        - mountPath: /mosquitto/data
          name: shared-data
      volumes:
      - configMap:
          name: {{ include "netmaker.fullname" . }}-mqtt-config
        name: mosquitto-config
      - configMap:
          name: {{ include "netmaker.fullname" . }}-mqtt-wait
          defaultMode: 0744
        name: wait-script
      - name: shared-data
        persistentVolumeClaim:
        {{- if .Values.mq.existingClaim }}
          claimName: {{ .Values.mq.existingClaim }}
        {{- else }} 
          claimName: {{ include "netmaker.fullname" . }}-shared-data-pvc
        {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "netmaker.fullname" . }}-mqtt
spec:
  ports:
  - name: mqtt
    port: 1883
    protocol: TCP
    targetPort: mqtt
  - name: mqtt2
    port: 8883
    protocol: TCP
    targetPort: mqtt2    
  selector:
    app: {{ include "netmaker.fullname" . }}-mqtt
  sessionAffinity: None
---
{{- if not .Values.mq.existingClaim }}
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ include "netmaker.fullname" . }}-shared-data-pvc
spec:
  storageClassName: {{ required "A valid .Values.mq.RWX.storageClassName entry required! Specify an available RWX storage class." .Values.mq.RWX.storageClassName}}
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: {{ .Values.mq.storageSize }}
---
{{- end }}
apiVersion: v1
data:
  mosquitto.conf: |
    per_listener_settings false
    listener 8883
    protocol websockets
    allow_anonymous false
    listener 1883
    protocol websockets
    allow_anonymous false
    plugin /usr/lib/mosquitto_dynamic_security.so
    plugin_opt_config_file /mosquitto/data/dynamic-security.json
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: {{ include "netmaker.fullname" . }}-mqtt
    app.kubernetes.io/name: {{ include "netmaker.fullname" . }}-mqtt
  name: {{ include "netmaker.fullname" . }}-mqtt-config
---
apiVersion: v1
data:
  wait.sh: |
    #!/bin/ash

    wait_for_netmaker() {
      echo "SERVER: ${NETMAKER_SERVER_HOST}"
      until curl --output /dev/null --silent --fail --head \
        --location "${NETMAKER_SERVER_HOST}/api/server/health"; do
        echo "Waiting for netmaker server to startup"
        sleep 1
      done
    }

    main(){
    # wait for netmaker to startup
    apk add curl
    wait_for_netmaker
    echo "Starting MQ..."
    # Run the main container command.
    /docker-entrypoint.sh
    /usr/sbin/mosquitto -c /mosquitto/config/mosquitto.conf

    }

    main "${@}"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: {{ include "netmaker.fullname" . }}-mqtt
    app.kubernetes.io/name: {{ include "netmaker.fullname" . }}-mqtt
  name: {{ include "netmaker.fullname" . }}-mqtt-wait
